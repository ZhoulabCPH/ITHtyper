#####  ROI RNA data asses  #####
library(ggridges)
library(ggplot2)
library(reshape2)
data <- read.csv("WTA_multi_ROI_raw_datalog2.csv",stringsAsFactors = F,row.names = 1)
data <- as.matrix(t(data))
roi <- read.csv("roi_code.csv",stringsAsFactors = F,row.names = 1)
roi <- roi[rownames(data),]
data <- data[rownames(roi),]
roi$all <-rep(1,dim(roi)[1])
data_pat <- data
rownames(data_pat) <- roi$code
data_sex <- data
rownames(data_sex) <- roi$Gender
data_loca <- data
rownames(data_loca) <- roi$TumorLocation
data_all <- data
rownames(data_all) <- roi$all

test_wide <- melt(data, varnames = c("ROI","gene"),value.name="exp")
test_wide <- as.data.frame(test_wide)
test_wide1 <- melt(data_pat, varnames = c("patient","gene"),value.name="exp")
test_wide1 <- as.data.frame(test_wide1)
test_wide2 <- melt(data_sex, varnames = c("sex","gene"),value.name="exp")
test_wide2 <- as.data.frame(test_wide2)
test_wide3 <- melt(data_loca, varnames = c("location","gene"),value.name="exp")
test_wide3 <- as.data.frame(test_wide3)
test_wide4 <- melt(data_all, varnames = c("all","gene"),value.name="exp")
test_wide4 <- as.data.frame(test_wide4)
test_wide1$patient <- factor(test_wide1$patient,
                             levels = c("Pt-100","Pt-115","Pt-125","Pt-162",
                                        "Pt-177","Pt-181","Pt-185","Pt-191",
                                        "Pt-192","Pt-214","Pt-227","Pt-237",
                                        "Pt-241","Pt-245","Pt-269","Pt-274",
                                        "Pt-278","Pt-289","Pt-294","Pt-323",
                                        "Pt-332","Pt-78","Pt-80","Pt-88",
                                        "Pt-97"))
ggplot(test_wide1, aes(x = exp, y = patient,fill = patient)) +
  geom_density_ridges(alpha=0.7,stat="binline", bins=33) + theme_ridges() +
  scale_x_continuous(breaks=c(0,4,8,12,16)) + 
  scale_fill_manual(values = c("#996699","#006699","#58B4AB","#E96463",
                               "#7A9D96","#8b220d","#c89c0e","#B89582",
                               "#492711","#FFCC99","#cbe86b","#bf5704",
                               "#E39183","#5B6A27","#EEDCC6","#ff85cb",
                               "#53bbf4","#C5C6B6","#ffc33c","#dee2d1",
                               "#f9fbba","#d4edf4","#57D1C9","#AC8697",
                               "#9baec8"))
ggplot(test_wide2, aes(x = exp, y = sex,fill = sex)) +
  geom_density_ridges(alpha=0.7,stat="binline", bins=33) + theme_ridges() +
  scale_x_continuous(breaks=c(0,4,8,12,16)) + 
  scale_fill_manual(values = c("#75c0b8","#e09a7d"))
ggplot(test_wide3, aes(x = exp, y = location,fill = location)) +
  geom_density_ridges(alpha=0.7,stat="binline", bins=33) + theme_ridges() +
  scale_x_continuous(breaks=c(0,4,8,12,16)) + 
  scale_fill_manual(values = c("#f3cfcb","#9d8fba"))
ggplot(test_wide, aes(x = exp, y = ROI,fill = ROI)) +
  geom_density_ridges(alpha=0.7,stat="binline", bins=50) + 
  theme_ridges() +
  scale_x_continuous(breaks=c(0,4,8,12,16))


####  all RNA distribution  ####
data <- read.csv("WTA_multi_ROI_raw_datalog2.csv",stringsAsFactors = F,row.names = 1)
data <- as.matrix(data)
hist(apply(data,2,median),breaks = 10)


###  RNA negative probe  ###
library(ggplot2)
library(ggpubr)
GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, draw_group = function(self, data, ..., draw_quantiles = NULL){
  data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
  grp <- data[1,'group']
  newdata <- plyr::arrange(transform(data, x = if(grp%%2==1) xminv else xmaxv), if(grp%%2==1) y else -y)
  newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
  newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x']) 
  if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
    stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <= 
                                              1))
    quantiles <- create_quantile_segment_frame(data, draw_quantiles)
    aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
    aesthetics$alpha <- rep(1, nrow(quantiles))
    both <- cbind(quantiles, aesthetics)
    quantile_grob <- GeomPath$draw_panel(both, ...)
    ggplot2:::ggname("geom_split_violin", grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
  }
  else {
    ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
  }
})
geom_split_violin <- function (mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) {
  layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}
data <- read.csv("Initial_Dataset_negative.csv",
                 stringsAsFactors = F)
rna <- read.csv("WTA_multi_ROI_rawdata_log2.csv",
                stringsAsFactors = F,row.names = 1)
data.new <- data[,colnames(rna)]
data.new.vio <- data.frame(count = c(as.numeric(as.matrix(data.new))),
                           roi = c(rep(colnames(data.new)[1],18815),rep(colnames(data.new)[2],18815),
                                   rep(colnames(data.new)[3],18815),rep(colnames(data.new)[4],18815),
                                   rep(colnames(data.new)[5],18815),rep(colnames(data.new)[6],18815),
                                   rep(colnames(data.new)[7],18815),rep(colnames(data.new)[8],18815),
                                   rep(colnames(data.new)[9],18815),rep(colnames(data.new)[10],18815),
                                   rep(colnames(data.new)[11],18815),rep(colnames(data.new)[12],18815),
                                   rep(colnames(data.new)[13],18815),rep(colnames(data.new)[14],18815),
                                   rep(colnames(data.new)[15],18815),rep(colnames(data.new)[16],18815),
                                   rep(colnames(data.new)[17],18815),rep(colnames(data.new)[18],18815),
                                   rep(colnames(data.new)[19],18815),rep(colnames(data.new)[20],18815),
                                   rep(colnames(data.new)[21],18815),rep(colnames(data.new)[22],18815),
                                   rep(colnames(data.new)[23],18815),rep(colnames(data.new)[24],18815),
                                   rep(colnames(data.new)[25],18815),rep(colnames(data.new)[26],18815),
                                   rep(colnames(data.new)[27],18815),rep(colnames(data.new)[28],18815),
                                   rep(colnames(data.new)[29],18815),rep(colnames(data.new)[30],18815),
                                   rep(colnames(data.new)[31],18815),rep(colnames(data.new)[32],18815),
                                   rep(colnames(data.new)[33],18815),rep(colnames(data.new)[34],18815),
                                   rep(colnames(data.new)[35],18815),rep(colnames(data.new)[36],18815),
                                   rep(colnames(data.new)[37],18815),rep(colnames(data.new)[38],18815),
                                   rep(colnames(data.new)[39],18815),rep(colnames(data.new)[40],18815),
                                   rep(colnames(data.new)[41],18815),rep(colnames(data.new)[42],18815),
                                   rep(colnames(data.new)[43],18815),rep(colnames(data.new)[44],18815),
                                   rep(colnames(data.new)[45],18815),rep(colnames(data.new)[46],18815),
                                   rep(colnames(data.new)[47],18815),rep(colnames(data.new)[48],18815),
                                   rep(colnames(data.new)[49],18815),rep(colnames(data.new)[50],18815),
                                   rep(colnames(data.new)[51],18815),rep(colnames(data.new)[52],18815),
                                   rep(colnames(data.new)[53],18815),rep(colnames(data.new)[54],18815),
                                   rep(colnames(data.new)[55],18815),rep(colnames(data.new)[56],18815),
                                   rep(colnames(data.new)[57],18815),rep(colnames(data.new)[58],18815),
                                   rep(colnames(data.new)[59],18815),rep(colnames(data.new)[60],18815),
                                   rep(colnames(data.new)[61],18815),rep(colnames(data.new)[62],18815),
                                   rep(colnames(data.new)[63],18815),rep(colnames(data.new)[64],18815),
                                   rep(colnames(data.new)[65],18815),rep(colnames(data.new)[66],18815),
                                   rep(colnames(data.new)[67],18815),rep(colnames(data.new)[68],18815),
                                   rep(colnames(data.new)[69],18815),rep(colnames(data.new)[70],18815),
                                   rep(colnames(data.new)[71],18815),rep(colnames(data.new)[72],18815),
                                   rep(colnames(data.new)[73],18815),rep(colnames(data.new)[74],18815),
                                   rep(colnames(data.new)[75],18815),rep(colnames(data.new)[76],18815),
                                   rep(colnames(data.new)[77],18815),rep(colnames(data.new)[78],18815),
                                   rep(colnames(data.new)[79],18815)),
                           CodeClass = data$CodeClass)
data.new.vio$count <- log2(data.new.vio$count + 1)
data.new.vio$all <- rep("all",dim(data.new.vio)[1])
ggplot(data = data.new.vio,aes(x=all,y=count,fill=CodeClass)) +
  geom_split_violin()





























