
######  cv score  ######
library(dplyr)

data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",
                 stringsAsFactors = F,row.names = 1)
cal_cv=function(x){  # formula
  y=na.omit(x)
  return(sd(y)/mean(y))
}
cv_result <- apply(data, 1, cal_cv) # application
cv_result <- cv_result[cv_result %>% order %>% rev]  ## ranked


######  计算样本 ROI 变异系数 转录组数据 ######
library(dplyr)
setwd("D:\\北京_小细胞肺癌Yap1\\zzc处理后的数据")
data <- read.csv("WTA_multi_ROI原始数据log2.csv",stringsAsFactors = F,row.names = 1)
# 计算变异系数  CV
cal_cv=function(x){  # 自定义函数 标准差/平均值
  y=na.omit(x)
  return(sd(y)/mean(y))
}
cv_result <- apply(data, 2, cal_cv) # 在每一列上应用自定义cal_cv函数
cv_result <- cv_result[cv_result %>% order %>% rev]
#write.csv(cv_result,"ROI变异系数.csv",quote = F)



#####  top 200 gene to ROI clustering  #####
library(pheatmap)
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",stringsAsFactors = F,row.names = 1)
clinical <- read.csv("clinical.csv",stringsAsFactors = F,row.names = 1)
roi <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
gene <- read.csv("Table S1.csv",stringsAsFactors = F,row.names = 1)
gene_top200 <- rownames(gene)[1:200]
red <- "#D94E48";
blue <- "#5175A4";
white <- rgb(255,255,255,maxColorValue = 255)
linshi <- apply(data,1,scale)
linshi <- t(linshi)
colnames(linshi) <- colnames(data)
rownames(linshi) <- rownames(data)
hist(linshi)
linshi[linshi>2] <- 2
linshi[linshi<(-2)] <- c(-2)
roi1 <- roi[colnames(linshi),]
names(roi1) <- colnames(linshi)
clinical <- clinical[roi1,]
annotation_col <- data.frame(patient = as.factor(roi1),
                             Gender = clinical$Gender,
                             SmokingHistory = clinical$SmokingHistory,
                             TumorLocation = clinical$TumorLocation,
                             PCI = clinical$PCI,
                             Tstage = as.factor(clinical$Tstage),
                             Nstage = as.factor(clinical$Nstage),
                             Mstage = as.factor(clinical$Mstage))
rownames(annotation_col) <- names(roi1)
ann_colors = list(patient = c("Pt-100"="#996699","Pt-115"="#006699","Pt-125"="#58B4AB","Pt-162"="#E96463",
                              "Pt-177"="#7A9D96","Pt-181"="#8b220d","Pt-185"="#c89c0e","Pt-191"="#B89582",
                              "Pt-192"="#492711","Pt-214"="#FFCC99","Pt-227"="#cbe86b","Pt-237"="#bf5704",
                              "Pt-241"="#E39183","Pt-245"="#5B6A27","Pt-269"="#EEDCC6","Pt-274"="#ff85cb",
                              "Pt-278"="#53bbf4","Pt-289"="#C5C6B6","Pt-294"="#ffc33c","Pt-323"="#dee2d1",
                              "Pt-332"="#f9fbba","Pt-78"="#d4edf4","Pt-80"="#57D1C9","Pt-88"="#AC8697",
                              "Pt-97"="#9baec8"),
                  Gender = c("Male" = "#75c0b8", "Female" = "#e09a7d"),
                  SmokingHistory = c("No" = "#45a3cb","Yes" = "#edab4c"),
                  TumorLocation = c("Left" = "#f3cfcb","Right" = "#9d8fba"),
                  PCI = c("No" = "#eae1e1","Yes" = "#778bbe"),
                  Tstage = c("1"="#e8d2c5","2"="#a1918f","3"="#716c75"),
                  Nstage = c("0"="#cccccc","1"="#91c0c0",
                             "2"="#c29e2e","3"="#647370"),
                  Mstage = c("0"="#d0e7ee"))
linshi200 <- linshi[gene_top200,]
out <- pheatmap(linshi200,fontsize=6,cutree_cols = 3,
                color  = colorRampPalette(c(blue,white,red))(100),
                annotation_col = annotation_col,
                annotation_colors = ann_colors,
                clustering_method = "ward.D2",
                border_color = "grey60",
                cluster_cols = T, cluster_rows = T,
                show_rownames = F, show_colnames = T
)  #聚类热图
out.dist=dist(t(linshi200)) 
out.hclust=hclust(out.dist,method="ward.D2")
name <- out.hclust$labels[out.hclust$order]
out.id <- cutree(out.hclust,k=3)

###  ITH score PMID: 32917965 ###
#if (!requireNamespace("devtools", quietly = TRUE))
#  install.packages("devtools")
#devtools::install_github("WangX-Lab/DEPTH")
library(DEPTH)
library(ggplot2)
library(ggpubr)
setwd("D:\\北京_小细胞肺癌Yap1\\zzc处理后的数据")
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",
                 stringsAsFactors = F,row.names = 1)
type <- data.frame(State = colnames(data),
                   Identification = rep("Tumor",dim(data)[2]))
ith_score <- DEPTH(data, type) 
rownames(ith_score) <- ith_score[,1]
ith_score <- as.data.frame(ith_score)
ith_score$`ITH score` <- as.numeric(ith_score$`ITH score`)
ith_score <- ith_score[name,]
barplot(ith_score$`ITH score`)
out.id <- out.id[rownames(ith_score)]
ith_score$cluster <- factor(out.id,levels = c(2,3,1)) ## 2:H-H, 3:M-H, 1:L=H
ith_score$cluster <- factor(ith_score$cluster,
                            levels = c("2","3","1"))
my_com <- list(c("2","3"),c("2","1"),c("3","1"))
ggplot(data = ith_score, aes(x = cluster , y = `ITH score`,fill=cluster)) + 
  stat_compare_means(label.y = 3, label.x = 1.5)  +  ### 添加总体的检验
  stat_compare_means(comparisons = my_com,label = "p.signif")  +
  geom_violin(trim=F,color="white",width = 0.8) +
  geom_jitter(aes(fill=cluster),width =0.2,shape = 21,size=3.5)+
  geom_boxplot(outlier.size=NA, size=0.01, outlier.shape = NA,width = 0.8,fill = "#FFFFFF",alpha = 0.4)+ #绘制箱线图
  scale_fill_manual(values = c("#9baec8","#F2BDD0","#D3BD74"))+ #设置填充的颜色
  theme_bw()+ #背景变为白色
  #ylim(0,0.01) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 0), #设置x轴刻度标签的字体显示倾斜角度为15度，并向下调整1(hjust = 1)，字体簇为Times大小为20
        axis.text.y=element_text(size=10,colour="black"), #设置y轴刻度标签的字体簇，字体大小，字体样式为plain
        axis.title.y=element_text(size = 10,colour="black"), #设置y轴标题的字体属性
        legend.text=element_text(colour="black",  #设置图例的子标题的字体属性
                                 size=10),
        legend.title=element_text(colour="black", #设置图例的总标题的字体属性
                                  size=10),
        panel.grid.major = element_blank(),   #不显示网格线
        panel.grid.minor = element_blank())+  #不显示网格线
  ylab("ITH score")



### C score
library(ggplot2)
library(ggpubr)
setwd("D:\\北京_小细胞肺癌Yap1\\zzc处理后的数据")
data <- read.csv("WTA_multi_ROI原始数据log2.csv",stringsAsFactors = F,row.names = 1)
setwd("D:\\北京_小细胞肺癌Yap1\\尝试一\\全基因组与空间")
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
patient <- unique(label$patient)
result <- matrix(,,4)
for (i in 1:length(patient)){
  weizhi <- which(patient[i] == label$patient)
  new_data <- data[,rownames(label)[weizhi]]
  if (dim(new_data)[2] > 2){
    for (j in 1:(dim(new_data)[2]-1)){
      for (z in (j+1):(dim(new_data)[2])){
        a <- cor.test(as.numeric(new_data[,j]),
                      as.numeric(new_data[,z]),
                      method = c("spearman"))
        b <- c(a$estimate,patient[i],label$cluster_new[weizhi][1],paste(colnames(new_data)[j],colnames(new_data)[z],sep = "_"))
        result <- rbind(result,b)
      }
    }
  }
  else if (dim(new_data)[2] == 2) {
    a <- cor.test(as.numeric(new_data[,1]),
                  as.numeric(new_data[,2]),
                  method = c("spearman"))
    b <- c(a$estimate,patient[i],label$cluster_new[weizhi][1],paste(colnames(new_data)[1],colnames(new_data)[2],sep = "_"))
    result <- rbind(result,b)
  }
}
result <- result[-1,]
result <- as.data.frame(result)
result$rho <- as.numeric(result$rho)
colnames(result) <- c("rho","patient","label","ROI")
result$label <- factor(result$label,
                       levels = c("highest-heterogeneity",
                                  "middle-heterogeneity",
                                  "low-heterogeneity"))


###  SPD  
library(ggplot2)
library(ggpubr)
data <- read.csv("WTA_ROI_spd.csv",stringsAsFactors = F,row.names = 1)
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
data <- data[rownames(label),]
patient <- unique(label$patient)
result <- matrix(,,4)
for (i in 1:length(patient)){
  weizhi <- which(patient[i] == label$patient)
  new_data <- data[rownames(label)[weizhi],]
  if (dim(new_data)[1] > 2){
    for (j in 1:(dim(new_data)[1]-1)){
      for (z in (j+1):(dim(new_data)[1])){
        a <- sqrt((new_data[j,1]-new_data[z,1])^2 + (new_data[j,2]-new_data[z,2])^2)
        b <- c(a,patient[i],label$cluster_new[weizhi][1],paste(rownames(new_data)[j],rownames(new_data)[z],sep = "_"))
        result <- rbind(result,b)
      }
    }
  }
  else if (dim(new_data)[1] == 2) {
    a <- sqrt((new_data[1,1]-new_data[2,1])^2 + (new_data[1,2]-new_data[2,2])^2)
    b <- c(a,patient[i],label$cluster_new[weizhi][1],paste(rownames(new_data)[1],rownames(new_data)[2],sep = "_"))
    result <- rbind(result,b)
  }
}
result <- result[-1,]
result <- as.data.frame(result)
colnames(result) <- c("Physical_distance","patient","label","ROI")
result$Physical_distance <- as.numeric(result$Physical_distance)


### relationship of C-score and SPD ###
library(ggplot2)
library(ggpubr)
cor <- read.csv("Cscore.csv",stringsAsFactors = F,
                row.names = 1,check.names = F)
distan <- read.csv("SPD.csv",stringsAsFactors = F,
                   row.names = 1,check.names = F)
cor <- cor[rownames(distan),]
data_new <- data.frame(cor = cor$rho,
                       distan = distan$Physical_distance)
ggplot(data = data_new, aes(x = cor, y = distan)) + 
  geom_point(colour = "#a696c8", size = 1) +  
  geom_smooth(method = lm,colour='#fd5f00',fill='#E7E1D7') + 
  ylab("SPD (μm)") + xlab("C-score") + theme_bw()+ 
  stat_cor(method = "spearman", label.x = median(data_new$cv),
           label.y = median(data_new$ith)) + theme_bw()


### differential expressed genes  ###
library(DESeq2)
data <- read.csv("WTA_multi_ROI_rawdata.csv",
                 stringsAsFactors = F,row.names = 1,check.names = F)
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,
                  row.names = 1,check.names = F)
data <- as.data.frame(data[,rownames(label)])
## LH
cluster1 <- as.factor(label$label1)
coldata <- data.frame(condition = factor(label$label1))
dds <- DESeqDataSetFromMatrix(countData = data, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, fitType = 'mean', minReplicatesForReplace = 7, parallel = FALSE)
res <- results(dds1, contrast = c('condition', 'LH', 'HH_MH'))
res <- as.data.frame(res)
data1 <- res
data1 <- data1[order(data1$log2FoldChange),]
data1$padj <- p.adjust(data1$pvalue,method = "fdr")
## MH
cluster1 <- as.factor(label$label2)
coldata <- data.frame(condition = factor(label$label2))
dds <- DESeqDataSetFromMatrix(countData = data, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, fitType = 'mean', minReplicatesForReplace = 7, parallel = FALSE)
res <- results(dds1, contrast = c('condition', 'MH', 'LH_HH'))
res <- as.data.frame(res)
data2 <- res
data2 <- data2[order(data2$log2FoldChange),]
data2$padj <- p.adjust(data2$pvalue,method = "fdr")
## HH
cluster1 <- as.factor(label$label3)
coldata <- data.frame(condition = factor(label$label3))
dds <- DESeqDataSetFromMatrix(countData = data, colData = coldata, design= ~condition)
dds1 <- DESeq(dds, fitType = 'mean', minReplicatesForReplace = 7, parallel = FALSE)
res <- results(dds1, contrast = c('condition', 'HH', 'LH_MH'))
res <- as.data.frame(res)
data3 <- res
data3 <- data3[order(data3$log2FoldChange),]
data3$padj <- p.adjust(data3$pvalue,method = "fdr")


###  Volcano plot   ###
library(ggplot2)
library(ggrepel)
library(ggpubr)
hh <- data1
mh <- data2
lh <- data3
FC = 1.5     ##  FC cutoff
P.Value = 0.05    ##  P-value cutoff
##  HH
hh$sig[(-1*log10(hh$pvalue) < -1*log10(P.Value)|hh$pvalue=="NA")|(hh$log2FoldChange < log2(FC))& hh$log2FoldChange  > -log2(FC)] <- "NotSig"
hh$sig[-1*log10(hh$pvalue) >= -1*log10(P.Value) & hh$log2FoldChange >= log2(FC)] <- "Up"
hh$sig[-1*log10(hh$pvalue) >= -1*log10(P.Value) & hh$log2FoldChange <= -log2(FC)] <- "Down"
hh$label <- rownames(hh)
hh$label[11:18666] <- ""
hh$logp <- (-1*log10(hh$pvalue))
ggplot(hh,aes(logp,hh$log2FoldChange)) +    #
  geom_point(aes(color = sig)) +                           # 
  labs(title="H-H",x="", y="log2(Fold change)") + 
  scale_color_manual(values = c("#e59572","#E6E6E6","#e59572")) + # 
  geom_hline(yintercept=c(-log2(FC),log2(FC)),linetype=2) +
  ggrepel::geom_label_repel(aes(label = label),data = hh,color="black")
##  MH
mh$sig[(-1*log10(mh$pvalue) < -1*log10(P.Value)|mh$pvalue=="NA")|(mh$log2FoldChange < log2(FC))& mh$log2FoldChange  > -log2(FC)] <- "NotSig"
mh$sig[-1*log10(mh$pvalue) >= -1*log10(P.Value) & mh$log2FoldChange >= log2(FC)] <- "Up"
mh$sig[-1*log10(mh$pvalue) >= -1*log10(P.Value) & mh$log2FoldChange <= -log2(FC)] <- "Down"
mh$label <- rownames(mh)
mh$label[11:18666] <- ""
mh$logp <- (-1*log10(mh$pvalue))
ggplot(mh,aes(logp,mh$log2FoldChange)) +    #
  geom_point(aes(color = sig)) +                           # 
  labs(title="M-H",x="", y="log2(Fold change)") + 
  scale_color_manual(values = c("#d3bd74","#E6E6E6","#d3bd74")) + # 
  geom_hline(yintercept=c(-log2(FC),log2(FC)),linetype=2) +
  ggrepel::geom_label_repel(aes(label = label),data = mh,color="black",size = 3)
##  LH
lh$sig[(-1*log10(lh$pvalue) < -1*log10(P.Value)|lh$pvalue=="NA")|(lh$log2FoldChange < log2(FC))& lh$log2FoldChange  > -log2(FC)] <- "NotSig"
lh$sig[-1*log10(lh$pvalue) >= -1*log10(P.Value) & lh$log2FoldChange >= log2(FC)] <- "Up"
lh$sig[-1*log10(lh$pvalue) >= -1*log10(P.Value) & lh$log2FoldChange <= -log2(FC)] <- "Down"
lh$label <- rownames(lh)
lh$label[11:18666] <- ""
lh$logp <- (-1*log10(lh$pvalue))
ggplot(lh,aes(logp,lh$log2FoldChange)) +    # 
  geom_point(aes(color = sig)) +                          
  labs(title="L-H",x="", y="log2(Fold change)") + 
  scale_color_manual(values = c("#9baec8","#E6E6E6","#9baec8")) + # 
  geom_hline(yintercept=c(-log2(FC),log2(FC)),linetype=2) +
  ggrepel::geom_label_repel(aes(label = label),data = lh,color="black",size = 3)


###  network  ###
library(Hmisc)
library(igraph)
library(ggraph)
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",stringsAsFactors = F,row.names = 1)
hh <- read.csv("HH_gene.csv",stringsAsFactors = F,row.names = 1)
mh <- read.csv("MH_gene.csv",stringsAsFactors = F,row.names = 1)
lh <- read.csv("LH_gene.csv",stringsAsFactors = F,row.names = 1)
all_up_fc <- rbind(hh[which(hh$sig == "Up"),],
                   mh[which(mh$sig == "Up"),],
                   lh[which(lh$sig == "Up"),])
data.hh <- data[rownames(hh)[which(hh$sig == "Up")],]
data.mh <- data[rownames(mh)[which(mh$sig == "Up")],]
data.lh <- data[rownames(lh)[which(lh$sig == "Up")],]
data.all <- t(rbind(data.hh,data.mh,data.lh))
res <- rcorr(data.all,type=c("spearman"))
res.r <- res$r
res.p <- res$P
mat.r <- matrix(,30450,3)
mat.p <- matrix(,30450,3)
for (i in 1:175){
  for (j in 1:175){
    if (i != j){
      a <- c(rownames(res.r)[i],colnames(res.r)[j],res.r[i,j])
      mat.r <- rbind(mat.r,a)
    }
  }
}
mat.r <- mat.r[-1,]
for (i in 1:175){
  for (j in 1:175){
    if (i != j){
      a <- c(rownames(res.p)[i],colnames(res.p)[j],res.p[i,j])
      mat.p <- rbind(mat.p,a)
    }
  }
}

mat.p <- mat.p[-1,]
colnames(mat.r) <- c("node1","node2","link")
colnames(mat.p) <- c("node1","node2","p")
mat.r <- mat.r[which(mat.p[,3] < 0.01),]  ##  
mat.r <- mat.r[which(mat.r[,3] > 0.5),]  ##  
mat.r <- as.data.frame(mat.r)
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
data.hh.roi <- data.all[rownames(label)[which(label$cluster_new == "highest-heterogeneity")],]
data.mh.roi <- data.all[rownames(label)[which(label$cluster_new == "middle-heterogeneity")],]
data.lh.roi <- data.all[rownames(label)[which(label$cluster_new == "low-heterogeneity")],]
gene.report <- data.frame(name = c(rownames(data.hh),
                                      rownames(data.mh),
                                      rownames(data.lh)),
                             type = c(rep("hh",dim(data.hh)[1]),
                                      rep("mh",dim(data.mh)[1]),
                                      rep("lh",dim(data.lh)[1])),
                             value = all_up_fc$log2FoldChange)
img <- graph_from_data_frame(mat.r, directed = F)
deg<-degree(img,mode="all")
gene.report <- gene.report[match(names(deg),gene.report$name),]
img <- graph_from_data_frame(mat.r, directed = F, vertices = gene.report)
deg<-degree(img,mode="all")
deg.fc <- all_up_fc[names(deg),2]
names(deg.fc) <- names(deg)
ggraph(img,layout = 'kk') +   
  geom_edge_link(color="grey",size = 0.1)+ 
  geom_node_point(aes(color = type,
                      size = deg.fc)) +   ## dot size: log FC 
  scale_color_manual(values = c("#e59572","#d3bd74","#9baec8"))+
  geom_node_text(aes(label = name)) +
  theme_graph()
## H-H Gradient chart
gene <- hh[names(deg),2]
gene.report.hh <- data.frame(name = names(deg),
                             type = c(rep("hh",36),
                                      rep("mh",48),
                                      rep("lh",26)),
                             value = all_up_fc[names(deg),2],
                             gene = gene)
img.hh <- graph_from_data_frame(mat.r, directed = F, vertices = gene.report.hh)
deg.hh <- degree(img.hh,mode="all")
ggraph(img.hh,layout = 'kk') +   
  geom_edge_link(color="grey",size = 0.1)+ 
  geom_node_point(aes(color = gene,
                      size = deg.fc)) +    ## dot size: log FC 
  theme_graph() + 
  scale_colour_gradient2(low = "#afb4ff", high = "#fc3a52", midpoint = 0)
## M-H Gradient chart
gene <- mh[names(deg),2]
gene.report.mh <- data.frame(name = names(deg),
                             type = c(rep("hh",36),
                                      rep("mh",48),
                                      rep("lh",26)),
                             value = all_up_fc[names(deg),2],
                             gene = gene)
img.mh <- graph_from_data_frame(mat.r, directed = F, vertices = gene.report.mh)
deg.mh <- degree(img.mh,mode="all")
ggraph(img.mh,layout = 'kk') +   
  geom_edge_link(color="grey",size = 0.1)+ 
  geom_node_point(aes(color = gene,
                      size = deg.fc)) +   ## dot size: log FC 
  theme_graph() + 
  scale_colour_gradient2(low = "#afb4ff", high = "#fc3a52", midpoint = 0)
## L-H Gradient chart
gene <- lh[names(deg),2]
gene.report.lh <- data.frame(name = names(deg),
                             type = c(rep("hh",36),
                                      rep("mh",48),
                                      rep("lh",26)),
                             value = all_up_fc[names(deg),2],
                             gene = gene)
img.lh <- graph_from_data_frame(mat.r, directed = F, vertices = gene.report.lh)
deg.lh <- degree(img.lh,mode="all")
ggraph(img.lh,layout = 'kk') +   
  geom_edge_link(color="grey",size = 0.1)+ 
  geom_node_point(aes(color = gene,
                      size = deg.fc)) +   ## 
  theme_graph() + 
  scale_colour_gradient2(low = "#afb4ff", high = "#fc3a52", midpoint = 0)


### clusterprofiler  enrichment analysis
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathview)
library(enrichplot)
library(dplyr)
library(msigdbr)
gene <- read.csv("network_gene.csv",stringsAsFactors = F,
                 row.names = 1,check.names = F)
gene.hh <- gene$gene[which(gene$cluster == "H-H")]
gene.hh <- bitr(gene.hh,fromType="SYMBOL",toType="ENTREZID",OrgDb="org.Hs.eg.db")  #开始ID转换，会有丢失
gene.hh <- dplyr::distinct(gene.hh,SYMBOL,.keep_all=TRUE) #
hall.hh <- enricher(gene.hh$ENTREZID, TERM2GENE=m_t2g,
                    pvalueCutoff = 1,pAdjustMethod = "fdr",
                    universe = NULL,
                    minGSSize = 5,
                    maxGSSize = 500,
                    qvalueCutoff = 1,)
hall.hh <- as.data.frame(hall.hh)
gene.mh <- gene$gene[which(gene$cluster == "M-H")]
gene.mh <- bitr(gene.mh,fromType="SYMBOL",toType="ENTREZID",OrgDb="org.Hs.eg.db")  #开始ID转换，会有丢失
gene.mh <- dplyr::distinct(gene.mh,SYMBOL,.keep_all=TRUE) #
hall.mh <- enricher(gene.mh$ENTREZID, TERM2GENE=m_t2g,
                    pvalueCutoff =1,pAdjustMethod = "fdr",
                    universe = NULL,
                    minGSSize = 1,
                    maxGSSize = 500,
                    qvalueCutoff = 1,)
hall.mh <- as.data.frame(hall.mh)
gene.lh <- gene$gene[which(gene$cluster == "L-H")]
gene.lh <- bitr(gene.lh,fromType="SYMBOL",toType="ENTREZID",OrgDb="org.Hs.eg.db")  #开始ID转换，会有丢失
gene.lh <- dplyr::distinct(gene.lh,SYMBOL,.keep_all=TRUE) #去重
hall.lh <- enricher(gene.lh$ENTREZID, TERM2GENE=m_t2g,
                    pvalueCutoff =1,pAdjustMethod = "fdr",
                    universe = NULL,
                    minGSSize = 1,
                    maxGSSize = 500,
                    qvalueCutoff = 1,)
hall.lh <- as.data.frame(hall.lh)


###  浸润软件估算 ROI 区域免疫细胞 ###
library(pheatmap)
library(ggplot2)
library(ggpubr)
box.fun <- function(x,y){
  ggplot(data = x, aes(x = cluster , y = x[,y],fill=cluster)) + 
    stat_compare_means(label.y = median(x[,y]), label.x = 1.5)  +  ### 添加总体的检验
    stat_compare_means(comparisons = my_com,label = "p.signif")  + 
    #geom_violin(trim=F,color="white",width = 0.8) +
    geom_jitter(aes(fill=cluster),width =0.2,shape = 21,size=2.5)+
    geom_boxplot(outlier.size=NA, size=0.01, outlier.shape = NA,
                 width = 0.8,alpha = 0.4)+ #绘制箱线图
    scale_fill_manual(values = c("#e59572","#9BAEC8","#D3BD74"))+ #设置填充的颜色
    theme_bw()+ #背景变为白色
    theme(legend.text=element_text(colour="black",size=10),
          legend.title=element_text(colour="black",size=10),
          panel.grid.major = element_blank(),legend.position="none")+  
    ylab(colnames(x)[y])
}
timer <- read.csv("TIMER_ROI.csv",stringsAsFactors = F,
                  row.names = 1,check.names = F)
mcp <- read.csv("MCPcounter_ROI.csv",stringsAsFactors = F,
                row.names = 1,check.names = F)
ciber <- read.csv("Cibersort_ROI.csv",stringsAsFactors = F,
                  row.names = 1,check.names = F)
cluster <- read.csv("cluster_roi.csv",stringsAsFactors = F,
                    row.names = 1,check.names = F)
cluster <- cluster[order(cluster$cluster_new),]
timer <- timer[,rownames(cluster)]
mcp <- mcp[,rownames(cluster)]
ciber <- ciber[,rownames(cluster)]
red <- "#D94E48";
blue <- "#5175A4";
white <- rgb(255,255,255,maxColorValue = 255)
linshi <- apply(ciber,1,scale)
linshi <- t(linshi)
colnames(linshi) <- colnames(ciber)
rownames(linshi) <- rownames(ciber)
hist(linshi)
linshi[linshi> 1] <- 1
linshi[linshi<(-1)] <- c(-1)
annotation_col <- data.frame(label = cluster$cluster_new)
rownames(annotation_col) <- rownames(cluster)
barplot(as.matrix(ciber),col = rep(c('#8bbfdf','#0063a4','#005a6b','#e80b7d','#f9b66e',
                                              '#e11a2a','#ee6b92','#00417c','#518f36','#f2a41b',
                                              '#9d6a13','#98c788','#f2938c','#149e4b','#fcc214',
                                              '#fcc214','#df1a30','#bda7c5','#ec4334','#7b2874',
                                              '#f28237','#007dba'),22),
        legend.text = c(rownames(ciber)))
# cibrsort boxplot
ciber_new <- as.data.frame(t(ciber)[rownames(cluster),])
ciber_new$cluster <- cluster$cluster_new
ciber_new$cluster <- factor(ciber_new$cluster,
                          levels = c("highest-heterogeneity",
                                     "middle-heterogeneity",
                                     "low-heterogeneity"))
my_com <- list(c("highest-heterogeneity","middle-heterogeneity"),
               c("highest-heterogeneity","low-heterogeneity"),
               c("middle-heterogeneity","low-heterogeneity"))
for (i in 1:22){
  a <- kruskal.test(ciber_new[,i]~ciber_new$cluster)
  if (a$p.value < 0.05){
    print(i)
  }
}
a1 <- box.fun(ciber_new,3)
# cibrsort boxplot
ciber_new <- as.data.frame(t(ciber)[rownames(cluster),])
ciber_new$cluster <- cluster$cluster_new
ciber_new$cluster <- factor(ciber_new$cluster,
                          levels = c("highest-heterogeneity",
                                     "middle-heterogeneity",
                                     "low-heterogeneity"))
my_com <- list(c("highest-heterogeneity","middle-heterogeneity"),
               c("highest-heterogeneity","low-heterogeneity"),
               c("middle-heterogeneity","low-heterogeneity"))
for (i in 1:22){
  a <- kruskal.test(ciber_new[,i]~ciber_new$cluster)
  if (a$p.value < 0.05){
    print(i)
  }
}
a1 <- box.fun(ciber_new,3)
a2 <- box.fun(ciber_new,4)
a3 <- box.fun(ciber_new,5)
a4 <- box.fun(ciber_new,17)
ggarrange(a1,a2,a3,a4,nrow = 2,ncol = 2)
mat <- data.frame(fraction = as.numeric(as.matrix(ciber_new[,c(-3,-4,-5,-17,-23)])),
                  cluster = rep(ciber_new$cluster,18),
                  cell = c(rep(colnames(ciber_new)[1],79),rep(colnames(ciber_new)[2],79),
                           rep(colnames(ciber_new)[6],79),rep(colnames(ciber_new)[7],79),
                           rep(colnames(ciber_new)[8],79),rep(colnames(ciber_new)[9],79),
                           rep(colnames(ciber_new)[10],79),rep(colnames(ciber_new)[11],79),
                           rep(colnames(ciber_new)[12],79),rep(colnames(ciber_new)[13],79),
                           rep(colnames(ciber_new)[14],79),rep(colnames(ciber_new)[15],79),
                           rep(colnames(ciber_new)[16],79),rep(colnames(ciber_new)[18],79),
                           rep(colnames(ciber_new)[19],79),rep(colnames(ciber_new)[20],79),
                           rep(colnames(ciber_new)[21],79),rep(colnames(ciber_new)[22],79)))
ggplot(data = mat, 
       aes(x = cell , y = fraction,fill=factor(cluster))) + 
  #geom_jitter(aes(fill=cluster),width =0.2,shape = 21,size=2.5)+
  geom_boxplot(outlier.size=NA, size=0.01, outlier.shape = NA,
               width = 0.8,alpha = 0.4)+ #绘制箱线图
  scale_fill_manual(values = c("#e59572","#D3BD74","#9BAEC8"))+ #设置填充的颜色
  theme_bw()+ #背景变为白色
  theme(legend.text=element_text(colour="black",size=10),
        legend.title=element_text(colour="black",size=10),
        panel.grid.major = element_blank())+  
  ylab("Fraction")
# timer
timer_new <- as.data.frame(t(timer)[rownames(cluster),])
timer_new$cluster <- cluster$cluster_new
timer_new$cluster <- factor(timer_new$cluster,
                          levels = c("highest-heterogeneity",
                                     "middle-heterogeneity",
                                     "low-heterogeneity"))
my_com <- list(c("highest-heterogeneity","middle-heterogeneity"),
               c("highest-heterogeneity","low-heterogeneity"),
               c("middle-heterogeneity","low-heterogeneity"))
for (i in 1:22){
  a <- kruskal.test(timer_new[,i]~timer_new$cluster)
  if (a$p.value < 0.05){
    print(i)
  }
}
b1 <- box.fun(timer_new,1)
b2 <- box.fun(timer_new,2)
b3 <- box.fun(timer_new,3)
b4 <- box.fun(timer_new,6)
# MCPCOUNTER
mcp_new <- as.data.frame(t(mcp)[rownames(cluster),])
mcp_new$cluster <- cluster$cluster_new
mcp_new$cluster <- factor(mcp_new$cluster,
                            levels = c("highest-heterogeneity",
                                       "middle-heterogeneity",
                                       "low-heterogeneity"))
my_com <- list(c("highest-heterogeneity","middle-heterogeneity"),
               c("highest-heterogeneity","low-heterogeneity"),
               c("middle-heterogeneity","low-heterogeneity"))
for (i in 1:11){
  a <- kruskal.test(mcp_new[,i]~mcp_new$cluster)
  if (a$p.value < 0.05){
    print(i)
  }
}
c1 <- box.fun(mcp_new,1)
c2 <- box.fun(mcp_new,2)
c3 <- box.fun(mcp_new,3)
c4 <- box.fun(mcp_new,5)
c5 <- box.fun(mcp_new,8)
ggarrange(b1,b2,b3,c1,c2,c3,c4,nrow = 1,ncol = 7)


###  ROI IHC (CD8 H-score)   ###
box.fun <- function(x,y){
  ggplot(data = x, aes(x = cluster , y = x[,y],fill=cluster)) + 
    stat_compare_means(label.y = median(x[,y]), label.x = 1.5)  +  ### 
    stat_compare_means(comparisons = my_com,label = "p.signif")  + 
    #geom_violin(trim=F,color="white",width = 0.8) +
    geom_jitter(aes(fill=cluster),width =0.2,shape = 21,size=2.5)+
    geom_boxplot(outlier.size=NA, size=0.01, outlier.shape = NA,
                 width = 0.8,alpha = 0.4)+ #
    scale_fill_manual(values = c("#e59572","#D3BD74","#9BAEC8"))+ #
    theme_bw()+ #背景变为白色
    theme(legend.text=element_text(colour="black",size=10),
          legend.title=element_text(colour="black",size=10),
          panel.grid.major = element_blank(),legend.position="none")+  
    ylab(colnames(x)[y])
}
cluster <- read.csv("cluster_roi.csv",stringsAsFactors = F,
                    row.names = 1,check.names = F)
cluster <- cluster[order(cluster$cluster_new),]
cd8 <- read.csv("CD8_ROI_Hscore.csv",
                stringsAsFactors = F,row.names = 1,check.names = F)
cd8 <- cd8[rownames(cluster),]
cd8_new <- as.data.frame(cd8[rownames(cluster),25])
cd8_new$cluster <- cluster$cluster_new
cd8_new$cluster <- factor(cd8_new$cluster,
                          levels = c("highest-heterogeneity",
                                     "middle-heterogeneity",
                                     "low-heterogeneity"))
my_com <- list(c("highest-heterogeneity","middle-heterogeneity"),
               c("highest-heterogeneity","low-heterogeneity"),
               c("middle-heterogeneity","low-heterogeneity"))
ebtop<-function(x){
  return(mean(x)+sd(x)/sqrt(length(x)))
}
ebbottom<-function(x){
  return(mean(x)-sd(x)/sqrt(length(x)))
}
ggplot(data=cd8_new,aes(x=cluster,y=cd8_new[,1],fill=cluster))+
  stat_summary(geom = "bar",fun = "mean",
               position = position_dodge(0.9))+
  stat_summary(geom = "errorbar",fun.min = ebbottom,
               fun.max = ebtop,position = position_dodge(0.9),width=0.2)+
  stat_compare_means(label.x = 1.5)  +  ### 
  stat_compare_means(comparisons = my_com,label = "p.signif")  + 
  scale_y_continuous(expand = expansion(mult = c(0,0.1)))+
  geom_jitter(aes(fill=cluster),width =0.3,shape = 21,size=1.5) +
  theme_bw()+ theme(panel.grid = element_blank())+ ylab("CD8 H-score")+
  scale_fill_manual(values = c("#e59572","#D3BD74","#9BAEC8"),name="")


###  immune-related molecule ###
library(pheatmap)
library(ggpubr)
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",stringsAsFactors = F,row.names = 1)
cluster <- read.csv("cluster_roi.csv",stringsAsFactors = F,
                    row.names = 1,check.names = F)
cluster <- cluster[order(cluster$cluster_new),]
data <- t(data)[rownames(cluster),]
mhc1 <- c("HLA-A","HLA-B","HLA-C","TAP1","TAP2","B2M")
mhc2 <- c("HLA-DPA1","HLA-DPB1","HLA-DPB2","HLA-DQA1","HLA-DQA2",
          "HLA-DQB1","HLA-DQB2","HLA-DRB1","HLA-DRB5","HLA-DRB6")
mhc.other <- c("HLA-E","HLA-F","HLA-G","HLA-H")
coinhi <- c('CTLA4','TIGIT','BTLA','CD48','PDCD1','LAG3',
            'CD274','HACR2','BTN2A2','LAIR1','BTN3A1',
            'PDCD1LG2','BTN1A1','VTCN1','BTNL2')
costi <- c('ICOS','TNFRSF9','CD70','CD80','TNFRSF13C','TMIGD2',
           'TNFRSF13B','CD27','SLAMF1','TNFSF13B','CD86','TNFSF4',
           'TNFRSF18','CD28','CD226','TNFSF9','TNFSF8','TNFSF18',
           'HAVCR1','TNFRSF4','TNFSF15','TNFSF13','CD58','ICOSLG',
           'TNFRSF8','TNFRSF14','BTNLB')
data.new <- data[,intersect(c(mhc1,mhc2,mhc.other,coinhi,costi),colnames(data))]
data.new.h <- data.new[rownames(cluster)[which(cluster$cluster_new == "highest-heterogeneity")],]
data.new.m <- data.new[rownames(cluster)[which(cluster$cluster_new == "middle-heterogeneity")],]
data.new.l <- data.new[rownames(cluster)[which(cluster$cluster_new == "low-heterogeneity")],]
fc.h.log2 <- log2(colMeans(data.new.h)/colMeans(rbind(data.new.m,data.new.l)))
fc.m.log2 <- log2(colMeans(data.new.m)/colMeans(rbind(data.new.h,data.new.l)))
fc.l.log2 <- log2(colMeans(data.new.l)/colMeans(rbind(data.new.m,data.new.h)))
p <- c()
for (i in 1:56){
  a <- kruskal.test(c(data.new.h[,i],data.new.m[,i],data.new.l[,i])~cluster$cluster_new)
  p <- c(p,a$p.value)
}
names(p) <- colnames(data.new)
heat.data <- rbind(fc.h.log2,fc.m.log2,fc.l.log2)
red <- "#D94E48";
blue <- "#5175A4";
white <- rgb(255,255,255,maxColorValue = 255)
out <- pheatmap(heat.data,fontsize=6,cutree_cols = 3,
                color  = colorRampPalette(c(blue,white,red))(100),
                clustering_method = "ward.D2",
                border_color = "grey60",
                cluster_cols = F, cluster_rows = F,
                show_rownames = T, show_colnames = T
)  


###  Stacked charts，ROI and patient ###
library(plyr)
library(ggplot2)
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
label$number <- 1
label1 <- ddply(label,'cluster_new',transform,percent = 1/sum(number)*100)
ggplot(label1)+
  scale_fill_manual(values = c("#e59572","#D3BD74","#9BAEC8"))+ #设置填充的颜色
  geom_bar(aes(x=patient,fill=cluster_new),position = "fill")+
  theme_bw()+
  theme(axis.ticks.length=unit(0.5,'cm'))+
  guides(fill=guide_legend(title=NULL)) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), #设置x轴刻度标签的字体显示倾斜角度为15度，并向下调整1(hjust = 1)，字体簇为Times大小为20
        axis.text.y=element_text(size=10,colour="black"), #设置y轴刻度标签的字体簇，字体大小，字体样式为plain
        axis.title.y=element_text(size = 10,colour="black"), #设置y轴标题的字体属性
        legend.text=element_text(colour="black",  #设置图例的子标题的字体属性
                                 size=10),
        legend.title=element_text(colour="black", #设置图例的总标题的字体属性
                                  size=10),
        panel.grid.major = element_blank(),   #不显示网格线
        panel.grid.minor = element_blank())


###  C-score in patient cluster ###
library(ggplot2)
library(ggpubr)
spearman <- read.csv("Cscore.csv",stringsAsFactors = F,row.names = 1)
ggplot(data = spearman, aes(x = patient_label , y = rho,fill=patient_label)) + 
  stat_compare_means(label.y = 1, label.x = 1.5)  + 
  geom_violin(trim=F,color="white",width = 0.8) +
  geom_jitter(aes(fill=patient_label),width =0.2,shape = 21,size=3.5)+
  geom_boxplot(outlier.size=NA, size=0.01, outlier.shape = NA,width = 0.8,fill = "#FFFFFF",alpha = 0.4)+ 
  scale_fill_manual(values = c("#f06966","#a39391"))+ 
  theme_bw()+ 
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 0), 
        axis.text.y=element_text(size=10,colour="black"),
        axis.title.y=element_text(size = 10,colour="black"), 
        legend.text=element_text(colour="black", 
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank())+  
  ylab("C-score")


###  average of C-score in patient  ###
library(ggplot2)
label <- read.csv("cluster_roi.csv",stringsAsFactors = F,row.names = 1)
c.score <- read.csv("Cscore.csv",stringsAsFactors = F,row.names = 1)
c.score.pt <- matrix(,,3)
pt <- unique(c.score$patient)
for (i in 1:length(pt)){
  weizhi <- which(pt[i] == c.score$patient)
  if (length(weizhi) > 1){
    c.score.pt <- rbind(c.score.pt,c(mean(c.score$rho[weizhi]),pt[i],
                                     c.score$patient_label[weizhi][1]))
  }
  else {
    c.score.pt <- rbind(c.score.pt,c(c.score$rho[weizhi],pt[i],
                                     c.score$patient_label[weizhi][1]))
  }
}
c.score.pt <- c.score.pt[-1,]
colnames(c.score.pt) <- c("C-score","Pt","cluster")
c.score.pt <- as.data.frame(c.score.pt)
c.score.pt <- c.score.pt[order(c.score.pt$cluster),]
c.score$patient_label <- factor(c.score$patient_label,
                                levels = c("H-H","Complex",
                                           "M-H","L-H"))
c.score$patient <- factor(c.score$patient,
                          levels = c("Pt-115","Pt-162","Pt-177","Pt-191","Pt-192","Pt-245",
                                     "Pt-269","Pt-78","Pt-80","Pt-274","Pt-214","Pt-227",
                                     "Pt-237","Pt-181","Pt-241","Pt-185","Pt-323","Pt-332",
                                     "Pt-278","Pt-97","Pt-100","Pt-294","Pt-289","Pt-125",
                                     "Pt-88"))
ggplot(data=c.score,aes(x=patient,y=rho,fill=patient_label))+
  stat_summary(geom = "bar",fun = "median",
               position = position_dodge(0.9))+
  stat_compare_means(label.x = 1.5)  +  
  scale_y_continuous(expand = expansion(mult = c(0,0.1)))+
  geom_jitter(aes(fill=patient_label),width =0.3,shape = 21,size=1.5) +
  theme_bw()+
  theme(panel.grid = element_blank())+
  ylab("C-score")+
  scale_fill_manual(values = c("#E59572","#014955","#D3BD74","#9BAEC8"),
                    name="") +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"), 
        legend.text=element_text(colour="black",  
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())


###  survival analysis  ###
library(survival)
library(survminer)
cluster <- read.csv("cluster_patient.csv",stringsAsFactors = F,row.names = 1)
clinical <- read.csv("clinical.csv",
                     stringsAsFactors = F,row.names = 1)
clinical <- clinical[rownames(cluster),]
clinical$cluster <- cluster$cluster_ITH
# OS
surv <- survfit(Surv(as.numeric(OS),OSState)~cluster,data = clinical)
surv
survdiff(Surv(as.numeric(OS),OSState)~cluster,data = clinical)
summary(surv)
summary(coxph(Surv(as.numeric(OS),OSState)~cluster,data = clinical))
ggsurvplot(surv,
           pval = TRUE,
           risk.table = TRUE, # Add risk table
           risk.table.col = "strata", # Change risk table color by groups
           palette = c("#f06966","#a39391"),
           legend = c(2,0.5), 
           legend.title = "", 
           conf.int = F,
           xlab = "Time (months)",
           ylab = "Overall Survival")
# DFS
surv <- survfit(Surv(as.numeric(DFS),DFSState)~cluster,data = clinical)
surv
survdiff(Surv(as.numeric(DFS),DFSState)~cluster,data = clinical)
summary(surv)
summary(coxph(Surv(as.numeric(DFS),DFSState)~cluster,data = clinical))
ggsurvplot(surv,
           pval = TRUE,
           risk.table = TRUE, # Add risk table
           risk.table.col = "strata", # Change risk table color by groups
           palette = c("#f06966","#a39391"),
           legend = c(2,0.5), 
           legend.title = "", 
           conf.int = F,
           xlab = "Time (months)",
           ylab = "Disease-free Survival"
)


###  Stacked charts，survival data  ###
library(plyr)
library(ggplot2)
cluster <- read.csv("cluster_patient.csv",stringsAsFactors = F,row.names = 1)
clinical <- read.csv("clinical.csv",
                     stringsAsFactors = F,row.names = 1)
clinical <- clinical[rownames(cluster),]
clinical$cluster <- cluster$cluster_new1
clinical$OSState <- as.factor(clinical$OSState)
clinical$DFSState <- as.factor(clinical$DFSState)
# DFS
clinical$number <- 1
clinical <- ddply(clinical,'DFSState',transform,percent = 1/sum(number)*100)
ggplot(clinical)+
  scale_fill_manual(values = c("#9DD3A8","#F0B775"))+ 
  geom_bar(aes(x=cluster,fill=DFSState),position = "fill")+
  theme_bw()+
  theme(axis.ticks.length=unit(0.5,'cm'))+
  guides(fill=guide_legend(title=NULL)) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"),
        legend.text=element_text(colour="black",  
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())
# OS
clinical$number <- 1
clinical <- ddply(clinical,'OSState',transform,percent = 1/sum(number)*100)
ggplot(clinical)+
  scale_fill_manual(values = c("#9DD3A8","#F0B775"))+ 
  geom_bar(aes(x=cluster,fill=OSState),position = "fill")+
  theme_bw()+
  theme(axis.ticks.length=unit(0.5,'cm'))+
  guides(fill=guide_legend(title=NULL)) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"), 
        legend.text=element_text(colour="black",  
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())


###  ITH and SCLC traditional subtype  ###
library(tidyverse)
library(viridis)
library(patchwork)
library(networkD3)
MisLinks <- read.csv("link_matrix.csv",stringsAsFactors = F)
MisNodes <- read.csv("node_matrix.csv",stringsAsFactors = F)
Node2index = list()
Node2index[MisNodes$name] = 0:length(MisNodes$name)
MisLinks = MisLinks %>%
  mutate(source2 = unlist(Node2index[source])) %>%
  mutate(target2 = unlist(Node2index[target]))
color2project = paste(unique(MisNodes$group_color),collapse = '","')
my_color <- paste0('d3.scaleOrdinal().domain(["',color2project,'"]).range(["',color2project,'"])')
sankeyNetwork(Links = MisLinks, 
              Nodes = MisNodes,
              Source = "source2", 
              Target = "target2",
              Value ="value",
              NodeID = "name",
              NodeGroup = "group_color", 
              colourScale = JS(my_color),
              fontSize = 8
)


###  NE score and subtype  ###
gene <- read.csv("NE_gene.csv",stringsAsFactors = F,row.names = 1)
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",
                 stringsAsFactors = F,row.names = 1)
intergene <- intersect(rownames(gene),rownames(data))
data <- data[intergene,]
gene <- gene[intergene,]
NEscore <- c()
for (i in 1:dim(data)[2]){
  ne <- cor.test(data[,i],gene$NE.class.mean.expression)
  non_ne <- cor.test(data[,i],gene$Non.NE.class.mean.expression)
  NEscore <- c(NEscore,(ne$estimate - non_ne$estimate)/2)
}
names(NEscore) <- colnames(data)

###  NE score  bar plot  ### 
library(ggplot2)
ne <- read.csv("NE_subtype.csv",stringsAsFactors = F,row.names = 1)
ne$num <- 1:dim(ne)[1]
ggplot(ne, aes(x=num, y=NE_score, fill=label)) +
  geom_bar(stat="identity",
           position=position_dodge()) + 
  scale_fill_manual(values = c("#eb8a3c","#cfe0f9"))+
  theme_bw() +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"), 
        legend.text=element_text(colour="black",  
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())+
  ylab("NE score")

###  TF subtype heatmap
library(pheatmap)
gene <- c('ASCL1','NEUROD1','POU2F3','YAP1')
data <- read.csv("WTA_multi_ROI_rawdata_log2.csv",
                 stringsAsFactors = F,row.names = 1)
data <- data[gene,]
red <- rgb(255,0,0,maxColorValue = 255)
blue <- "#13334c";
ye <- "#F5E0A3";
linshi <- apply(data,2,scale)
rownames(linshi) <- rownames(data)
hist(linshi)
linshi[linshi<(0)] <- c(0)
out <- pheatmap(linshi,fontsize=6,cutree_cols = 3,
                color  = colorRampPalette(c(blue,ye,red))(100),
                clustering_method = "ward.D",
                border_color = "grey60",
                cluster_cols = T, cluster_rows = F,
                show_rownames = T, show_colnames = T)  
out.dist=dist(t(linshi)) 
out.hclust=hclust(out.dist,method="ward.D")
out.id=cutree(out.hclust,k=3)  

###  Stacked charts of ROI  NE subtype  ###
library(plyr)
library(ggplot2)
label <- read.csv("traditional.csv",stringsAsFactors = F,row.names = 1)
label$number <- 1
label1 <- ddply(label,'NE_label',transform,percent = 1/sum(number)*100)
ggplot(label1)+
  scale_fill_manual(values = c("#eb8a3c","#cfe0f9"))+ 
  geom_bar(aes(x=patient_ID,fill=label),position = "fill")+
  theme_bw()+
  theme(axis.ticks.length=unit(0.5,'cm'))+
  guides(fill=guide_legend(title=NULL)) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"),
        legend.text=element_text(colour="black", 
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())

###  Stacked charts of ROI  TF subtype  ###
library(plyr)
library(ggplot2)
label <- read.csv("traditional.csv",stringsAsFactors = F,row.names = 1)
label$patient_ID <- rownames(label)
label$number <- 1
label1 <- ddply(label,'TF_label',transform,percent = 1/sum(number)*100)
ggplot(label1)+
  scale_fill_manual(values = c("#c9af98","#F0B775","#8AC6D1"))+ 
  geom_bar(aes(x=patient_ID,fill=TF),position = "fill")+
  theme_bw()+
  theme(axis.ticks.length=unit(0.5,'cm'))+
  guides(fill=guide_legend(title=NULL)) +
  theme(axis.text.x=element_text(hjust = 1,colour="black",size=10,angle = 90), 
        axis.text.y=element_text(size=10,colour="black"), 
        axis.title.y=element_text(size = 10,colour="black"), 
        legend.text=element_text(colour="black",  
                                 size=10),
        legend.title=element_text(colour="black", 
                                  size=10),
        panel.grid.major = element_blank(),   
        panel.grid.minor = element_blank())

###  NE subtype survival analysis  ###
library(survival)
library(survminer)
label <- read.csv("cluster_patient.csv",stringsAsFactors = F,row.names = 1)
clinical <- read.csv("clinical.csv",
                     stringsAsFactors = F,row.names = 1)
clinical <- clinical[rownames(label),]
clinical$label <- label$NE_type
## dfs
surv <- survfit(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical)
surv
survdiff(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical)
summary(surv)
summary(coxph(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical))
ggsurvplot(surv,
           pval = TRUE,
           risk.table = TRUE, # Add risk table
           risk.table.col = "strata", # Change risk table color by groups
           palette = c("#DE9974","#CFE0F9","#D74B4B"),
           legend = c(2,0.5), 
           legend.title = "", 
           conf.int = F,
           xlab = "Time (months)",
           ylab = "Disease-free survival"
)

###   TF subtype survival analysis   ###
library(survival)
library(survminer)
label <- read.csv("cluster_patient.csv",stringsAsFactors = F,row.names = 1)
clinical <- read.csv("clinical.csv",
                     stringsAsFactors = F,row.names = 1)
clinical <- clinical[rownames(label),]
clinical$label <- label$TF
## dfs
surv <- survfit(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical)
surv
survdiff(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical)
summary(surv)
summary(coxph(Surv(as.numeric(clinical$DFS),clinical$DFSState)~label,data = clinical))
ggsurvplot(surv,
           pval = TRUE,
           risk.table = TRUE, # Add risk table
           risk.table.col = "strata", # Change risk table color by groups
           palette = c("#c9af98","#F0B775","#8AC6D1","#D74B4B"),
           legend = c(2,0.5), 
           legend.title = "", 
           conf.int = F,
           xlab = "Time (months)",
           ylab = "Disease-free survival"
)

































